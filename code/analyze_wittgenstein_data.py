üìÑ  Extracted from page
: ```json
{
  "file_name": "analyze_wittgenstein_data.py",
  "content": "#!/usr/bin/env python3\n\"\"\"Script para analizar y procesar los datos acad√©micos sobre Ludwig Wittgenstein\nExtrae informaci√≥n clave y organiza los hallazgos por categor√≠as\"\"\"\n\nimport json\nimport os\nfrom datetime import datetime\nfrom collections import defaultdict\n\nclass WittgensteinDataAnalyzer:\n    def __init__(self, data_file=\"/workspace/data/wittgenstein_academic_results.json\"):\n        self.data_file = data_file\n        self.academic_data = {}\n        self.organized_findings = {}\n        self.key_sources = []\n        \n    def load_academic_data(self):\n        \"\"\"Carga los datos acad√©micos desde el archivo JSON\"\"\"\n        try:\n            with open(self.data_file, 'r', encoding='utf-8') as f:\n                self.academic_data = json.load(f)\n                print(f\"‚úì Datos acad√©micos cargados: {len(self.academic_data)} entradas\")\n        except FileNotFoundError:\n            print(f\"‚ùå Error: No se encontr√≥ el archivo {self.data_file}\")\n            return False\n        except json.JSONDecodeError:\n            print(f\"‚ùå Error: El archivo {self.data_file} no es un JSON v√°lido\")\n            return False\n        return True\n    \n    def categorize_sources(self):\n        \"\"\"Categoriza las fuentes por tipo y relevancia\"\"\"\n        categories = {\n            'primary_sources': [],\n            'biographical': [],\n            'philosophical_works': [],\n            'influence_received': [],\n            'influence_exercised': [],\n            'historical_context': [],\n            'quotes_citations': [],\n            'academic_analysis': []\n        }\n        \n        for entry in self.academic_data:\n            if not isinstance(entry, dict):\n                continue\n                \n            title = entry.get('title', '').lower()\n            url = entry.get('url', '')\n            description = entry.get('description', '').lower()\n            \n            # Clasificar por contenido\n            if any(term in title for term in ['tractatus', 'investigaciones', 'philosophical investigations']):\n                categories['primary_sources'].append(entry)\n            elif any(term in title for term in ['biography', 'biograf√≠a', 'life', 'vida']):\n                categories['biographical'].append(entry)\n            elif any(term in title for term in ['russell', 'frege', 'schopenhauer', 'influence']):\n                categories['influence_received'].append(entry)\n            elif any(term in title for term in ['vienna circle', 'c√≠rculo de viena', 'analytic philosophy']):\n                categories['influence_exercised'].append(entry)\n            elif any(term in title for term in ['quotes', 'citas', 'phrases', 'frases']):\n                categories['quotes_citations'].append(entry)\n            elif any(term in title for term in ['cambridge', 'world war', 'guerra mundial', 'context']):\n                categories['historical_context'].append(entry)\n            else:\n                categories['academic_analysis'].append(entry)\n        \n        self.organized_findings['categories'] = categories\n        print(\"\\nüìä CATEGORIZACI√ìN DE FUENTES:\")\n        for category, sources in categories.items():\n            print(f\"  {category}: {len(sources)} fuentes\")\n    \n    def extract_key_information(self):\n        \"\"\"Extrae informaci√≥n clave de las fuentes m√°s relevantes\"\"\"\n        key_info = {\n            'biographical_data': {},\n            'major_works': {},\n            'philosophical_concepts': {},\n            'influences': {},\n            'quotes': [],\n            'timeline': {},\n            'sources_metadata': []\n        }\n        \n        # Extraer informaci√≥n biogr√°fica\n        for source in self.organized_findings['categories']['biographical']:\n            if 'description' in source:\n                desc = source['description']\n                if '1889' in desc or '1951' in desc:\n                    key_info['biographical_data']['birth_death'] = \"1889-1951\"\n                if 'cambridge' in desc.lower():\n                    key_info['biographical_data']['university'] = \"Cambridge University\"\n                if 'austria' in desc.lower() or 'vienna' in desc.lower():\n                    key_info['biographical_data']['origin'] = \"Austria, Vienna\"\n        \n        # Extraer obras principales\n        for source in self.organized_findings['categories']['primary_sources']:\n            title = source.get('title', '')\n            if 'tractatus' in title.lower():\n                key_info['major_works']['tractus'] = {\n                    'title': 'Tractatus Logico-Philosophicus',\n                    'year': '1921',\n                    'source': source.get('url', '')\n                }\n            elif 'investigations' in title.lower() or 'investigaciones' in title.lower():\n                key_info['major_works']['investigations'] = {\n                    'title': 'Investigaciones Filos√≥ficas',\n                    'year': '1953',\n                    'source': source.get('url', '')\n                }\n        \n        # Identificar fuentes de alta calidad\n        high_quality_domains = ['stanford.edu', 'cambridge.org', 'jstor.org', 'academia.edu']\n        for source in self.academic_data:\n            if isinstance(source, dict) and 'url' in source:\n                url = source['url']\n                if any(domain in url for domain in high_quality_domains):\n                    key_info['sources_metadata'].append({\n                        'title': source.get('title', ''),\n                        'url': url,\n                        'type': 'academic',\n                        'quality': 'high'\n                    })\n        \n        self.organized_findings['key_information'] = key_info\n        print(\"\\nüîç INFORMACI√ìN CLAVE EXTRA√çDA:\")\n        print(f\"  Datos biogr√°ficos: {len(key_info['biographical_data'])} elementos\")\n        print(f\"  Obras principales: {len(key_info['major_works'])} obras\")\n        print(f\"  Fuentes de alta calidad: {len(key_info['sources_metadata'])} fuentes\")\n    \n    def identify_gaps(self):\n        \"\"\"Identifica qu√© informaci√≥n adicional se necesita\"\"\"\n        gaps = {\n            'missing_photos': True,\n            'missing_quotes': len(self.organized_findings['categories']['quotes_citations']) < 3,\n            'missing_influences': len(self.organized_findings['categories']['influence_received']) < 3,\n            'missing_context': len(self.organized_findings['categories']['historical_context']) < 2,\n            'missing_spanish_links': True  # Necesitamos verificar enlaces en espa√±ol\n        }\n        \n        self.organized_findings['research_gaps'] = gaps\n        print(\"\\n‚ö†Ô∏è BRECHAS EN LA INVESTIGACI√ìN:\")\n        for gap, exists in gaps.items():\n            status = \"‚ùå Necesario\" if exists else \"‚úì Completo\"\n            print(f\"  {gap}: {status}\")\n    \n    def generate_recommendations(self):\n        \"\"\"Genera recomendaciones para completar la investigaci√≥n\"\"\"\n        recommendations = [\n            \"Buscar fotograf√≠as hist√≥ricas de Wittgenstein\",\n            \"Extraer citas textuales espec√≠ficas de sus obras principales\",\n            \"Investigar su relaci√≥n con Russell y Frege en detalle\",\n            \"Buscar enlaces a obras en espa√±ol en Archive.org y Project Gutenberg\",\n            \"Complementar informaci√≥n sobre el contexto de la Primera Guerra Mundial\",\n            \"Obtener informaci√≥n sobre su influencia en el C√≠rculo de Viena\"\n        ]\n        \n        self.organized_findings['recommendations'] = recommendations\n        print(\"\\nüí° RECOMENDACIONES PARA INVESTIGACI√ìN ADICIONAL:\")\n        for i, rec in enumerate(recommendations, 1):\n            print(f\"  {i}. {rec}\")\n    \n    def save_findings(self, output_file=\"/workspace/data/wittgenstein_organized_findings.json\"):\n        \"\"\"Guarda los hallazgos organizados en un archivo JSON\"\"\"\n        # A√±adir metadatos\n        self.organized_findings['metadata'] = {\n            'analysis_date': datetime.now().isoformat(),\n            'total_sources_analyzed': len(self.academic_data),\n            'analyzer_version': '1.0',\n            'status': 'preliminary_analysis_complete'\n        }\n        \n        try:\n            os.makedirs(os.path.dirname(output_file), exist_ok=True)\n            with open(output_file, 'w', encoding='utf-8') as f:\n                json.dump(self.organized_findings, f, indent=2, ensure_ascii=False)\n            print(f\"\\nüíæ Hallazgos guardados en: {output_file}\")\n        except Exception as e:\n            print(f\"‚ùå Error al guardar hallazgos: {e}\")\n    \n    def run_analysis(self):\n        \"\"\"Ejecuta el an√°lisis completo\"\"\"\n        print(\"üî¨ INICIANDO AN√ÅLISIS DE DATOS ACAD√âMICOS SOBRE WITTGENSTEIN\\n\")\n        \n        if not self.load_academic_data():\n            return False\n        \n        self.categorize_sources()\n        self.extract_key_information()\n        self.identify_gaps()\n        self.generate_recommendations()\n        self.save_findings()\n        \n        print(\"\\n‚úÖ AN√ÅLISIS COMPLETADO EXITOSAMENTE\")\n        return True\n\ndef main():\n    analyzer = WittgensteinDataAnalyzer()\n    analyzer.run_analysis()\n\nif __name__ == \"__main__\":\n    main()"
}
```
